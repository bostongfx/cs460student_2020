# -*- coding: utf-8 -*-
"""Copy of glTF.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rXZ8ECjfrpdKnhCQx88xrU45yvcZQyBN
"""

import numpy as np
import base64

# Generator only for cow.obj
# added materials, references: https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#texture-data
# parse line by line references: https://tutorial.eyehunts.com/python/python-read-file-line-by-line-readlines/
# get vertices and indices from obj file.
VERICES_OUT_OF_PARSE = []
INDICE_OUF_OF_PARSE = []
# obj file "cow.obj"
fileObj = open("cow.obj", "r")
for line in fileObj.readlines():
    # line = line.strip('\n')
    line_list = line.split()
    if line_list[0] == 'v':
      VERICES_OUT_OF_PARSE.append(line_list[1])
      VERICES_OUT_OF_PARSE.append(line_list[2])
      VERICES_OUT_OF_PARSE.append(line_list[3])
    if line_list[0] == 'f':
      # File indice starts from 1, here should -1
      INDICE_OUF_OF_PARSE.append(int(line_list[1])-1)
      INDICE_OUF_OF_PARSE.append(int(line_list[2])-1)
      INDICE_OUF_OF_PARSE.append(int(line_list[3])-1)
    
fileObj.close()

# make vertices np array with float32 type, and indices with ushort type.
VERTICES = np.array(VERICES_OUT_OF_PARSE, dtype=np.float32)
INDICES = np.array(INDICE_OUF_OF_PARSE, dtype=np.ushort)

# VERTICES number is / 3
HOWMANY_V = int(VERTICES.size / 3)

HOWMANY_I = int(INDICES.size)
HOWMANYBYTES_V = VERTICES.nbytes
HOWMANYBYTES_I = INDICES.nbytes

# get MAX_X and MIN_X. index at 0, 3, 6
x_i = 0
MAX_X = float("-inf")
MIN_X = float("inf")
while x_i < VERTICES.size:
    MAX_X = max(VERTICES[x_i], MAX_X)
    MIN_X = min(VERTICES[x_i], MIN_X)
    x_i += 3

# get MAX_Y and MIN_Y. index at 1, 4, 7
y_i = 1
MAX_Y = float("-inf")
MIN_Y = float("inf")
while y_i < VERTICES.size:
    MAX_Y = max(VERTICES[y_i], MAX_Y)
    MIN_Y = min(VERTICES[y_i], MIN_Y)
    y_i += 3


# get MAX_Z and MIN_Z. index at 2, 5, 8
z_i = 2
MAX_Z = float("-inf")
MIN_Z = float("inf")
while z_i < VERTICES.size:
    MAX_Z = max(VERTICES[z_i], MAX_Z)
    MIN_Z = min(VERTICES[z_i], MIN_Z)
    z_i += 3

# get MAX indice with np.amax
MAX = np.amax(INDICES)

# get MIN indice with np.amin
MIN = np.amin(INDICES)

B64_VERTICES = base64.b64encode(VERTICES)
B64_INDICES = base64.b64encode(INDICES)

gltf = {
    "asset": {
        "version": "2.0",
        "generator": "CS460 Magic Fingers"
    },

  "accessors": [
        {
            "bufferView": 0,
            "byteOffset": 0,
            "componentType": 5126,
            "count": HOWMANY_V,
            "type": "VEC3",
            "max": [MAX_X, MAX_Y, MAX_Z],
            "min": [MIN_X, MIN_Y, MIN_Z]
        },
        {
            "bufferView": 1,
            "byteOffset": 0,
            "componentType": 5123,
            "count": HOWMANY_I,
            "type": "SCALAR",
            "max": [MAX],
            "min": [MIN]
        }
    ], 

    "bufferViews": [
        {
            "buffer": 0,
            "byteOffset": 0,
            "byteLength": HOWMANYBYTES_V,
            "target": 34962
        },
        {
            "buffer": 1,
            "byteOffset": 0,
            "byteLength": HOWMANYBYTES_I,
            "target": 34963
        }
    ],
    
    "buffers": [
        {
            "uri": "data:application/octet-stream;base64,"+str(B64_VERTICES, 'utf-8'),
            "byteLength": HOWMANYBYTES_V
        },
        {
            "uri": "data:application/octet-stream;base64,"+str(B64_INDICES, 'utf-8'),
            "byteLength": HOWMANYBYTES_I
        }
    ],
  
    "meshes": [
        {
            "primitives": [{
                 "mode": 4,
                 "attributes": {
                     "POSITION": 0
                 },
                 # add material index
                 "material": 0,
                 "indices": 1
            }]
        }
    ],

    "nodes": [
        {
            "mesh": 0
        }
    ],

    "scenes": [
        {
            "nodes": [
                0
            ]
        }
    ],

    "scene": 0,
    # add material here
    "materials": [
        {
            "name": "gold",
            "pbrMetallicRoughness": {
                "baseColorFactor": [ 1.000, 0.766, 0.336, 1.0 ],
                "metallicFactor": 1.0,
                "roughnessFactor": 0.4
            },
            "emissiveFactor": [
                0.76,
                0.5,
                0.336
            ]
        }
    ]
}

res = str(gltf).replace("'", '"') # we need double quotes instead of single quotes

# print 
print(res)